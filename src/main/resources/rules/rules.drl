package rules;
import rules.model.CoefficientsAndPrices;
import rules.model.RulesModel
import rules.model.InsuredPerson;
import rules.model.InsuredCar;
import rules.model.InsuredRealEstate;

lock-on-active
rule "Base price"

    when
        m: RulesModel( days: days )
        person: InsuredPerson () from m.insuredPeople
        prices: CoefficientsAndPrices ( dailyPrice: pricePerDay)
    then
        person.setBasePrice(days * dailyPrice);
        person.setPrice(days * dailyPrice);
        update (m);

end

lock-on-active
rule "Region adjustment"

    when
        m: RulesModel(  )
        person: InsuredPerson ( basePrice: basePrice, price: price) from m.insuredPeople
        prices: CoefficientsAndPrices ( regionCoefficient: regionCoefficient)
    then
        person.setPrice(regionCoefficient * basePrice + (price-basePrice));
        update (m);

end

lock-on-active
rule "Sport risk"

    when
        m: RulesModel ( sport == true )
        person: InsuredPerson ( basePrice: basePrice, price: price) from m.insuredPeople
        prices: CoefficientsAndPrices ( sportCoefficient: sportCoefficient)
    then
        person.setPrice(sportCoefficient * basePrice + (price-basePrice));
        update (m);

end

lock-on-active
rule "Insured amount adjustment"

    when
        m: RulesModel()
        person: InsuredPerson ( price: price) from m.insuredPeople
        prices: CoefficientsAndPrices ( insuredAmountAddition: insuredAmountPrice)
    then
       person.setPrice(price + insuredAmountAddition);
       update (m);

end

lock-on-active
rule "Elderly risk"

    when
        m: RulesModel()
        person: InsuredPerson ( basePrice: basePrice, price: price, ageGroup: ageGroup == 6) from m.insuredPeople
        prices: CoefficientsAndPrices ( elderlyCoefficient: oldsCoefficient)
    then
        person.setPrice(elderlyCoefficient * basePrice + (price-basePrice));
        update (m);

end

lock-on-active
rule "Young discount"

    when
        m: RulesModel()
        person: InsuredPerson ( basePrice: basePrice, price: price, ageGroup: ageGroup == 4) from m.insuredPeople
        prices: CoefficientsAndPrices ( youngsCoefficient: youngsCoefficient)
    then
       person.setPrice(youngsCoefficient * basePrice + (price-basePrice));
       update (m);

end

lock-on-active
rule "Adults price"

    when
        m: RulesModel()
        person: InsuredPerson ( basePrice: basePrice, price: price, ageGroup: ageGroup == 5) from m.insuredPeople
        prices: CoefficientsAndPrices ( adultsCoefficient: adultsCoefficient)
    then
       person.setPrice(adultsCoefficient * basePrice + (price-basePrice));
       update (m);

end


rule "Group discount"

    when
        m: RulesModel (numberOfPeople: numberOfPeople > 4, totalPrice: totalPrice)
    then
        m.setGroupDiscount(0.2 * totalPrice);

end

rule "Real Estate insured from burglary"

    when
        m: RulesModel ( insuredRealEstate != null, days: days)
        insuredRealEstate: InsuredRealEstate(area: area, currentPrice: price, burglary == true) from m.insuredRealEstate
        prices: CoefficientsAndPrices( pricePerDay: burglaryPricePerDay, ageCoeff : realEstateAgeCoefficient, luxuryAddition: realEstateValuePrice)
    then
        insuredRealEstate.setPrice(currentPrice + days * area * pricePerDay * ageCoeff + luxuryAddition);


end

rule "Real Estate insured from flood"

    when
        m: RulesModel ( insuredRealEstate != null, days: days)
        insuredRealEstate: InsuredRealEstate(area: area, currentPrice: price, flood == true) from m.insuredRealEstate
        prices: CoefficientsAndPrices( pricePerDay: floodPricePerDay, ageCoeff : realEstateAgeCoefficient, luxuryAddition: realEstateValuePrice)
    then
        insuredRealEstate.setPrice(currentPrice + days * area * pricePerDay * ageCoeff + luxuryAddition);


end

rule "Real Estate insured from fire"

    when
        m: RulesModel ( insuredRealEstate != null, days: days)
        insuredRealEstate: InsuredRealEstate(area: area, currentPrice: price, fire == true) from m.insuredRealEstate
        prices: CoefficientsAndPrices( pricePerDay: firePricePerDay, ageCoeff : realEstateAgeCoefficient, luxuryAddition: realEstateValuePrice)
    then
        insuredRealEstate.setPrice(currentPrice + days * area * pricePerDay * ageCoeff + luxuryAddition);


end

rule "Towing"

    when
        m: RulesModel ( insuredCar != null, days: days)
        insuredCar: InsuredCar(currentPrice: price, towing == true) from m.insuredCar
        prices: CoefficientsAndPrices( towPrice: towPrice )
    then
        insuredCar.setPrice(currentPrice + days * towPrice);


end

rule "Alternative transport"

    when
            m: RulesModel ( insuredCar != null, days: days)
            insuredCar: InsuredCar(currentPrice: price, alternativeRide == true) from m.insuredCar
            prices: CoefficientsAndPrices( altTransportPrice: alternativePrice )
        then
            insuredCar.setPrice(currentPrice + days * altTransportPrice);


end

rule "Car repair"

    when
            m: RulesModel ( insuredCar != null, days: days)
            insuredCar: InsuredCar(currentPrice: price, repairment == true) from m.insuredCar
            prices: CoefficientsAndPrices( repairPrice: repairPrice )
        then
            insuredCar.setPrice(currentPrice + days * repairPrice);


end

rule "Accomodation"

   when
           m: RulesModel ( insuredCar != null, days: days)
           insuredCar: InsuredCar(currentPrice: price, hotel == true) from m.insuredCar
           prices: CoefficientsAndPrices( accomodationPrice: hotelPrice )
       then
           insuredCar.setPrice(currentPrice + days * accomodationPrice);


end

rule "Package discount"

    when
        m: RulesModel (carInsured == true, realEstateInsured == true, totalPrice: totalPrice)

    then
        m.setPackageDiscount(totalPrice * 0.1);
        update(m);

end



