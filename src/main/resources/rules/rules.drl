package rules;
import rules.model.CoefficientsAndPrices;
import rules.model.RulesModel
import rules.model.InsuredPerson;
import rules.model.InsuredCar;
import rules.model.InsuredRealEstate;

lock-on-active
rule "Base price"

    when
        m: RulesModel( days: days )
        person: InsuredPerson () from m.insuredPeople
        prices: CoefficientsAndPrices ( dailyPrice: pricePerDay)
    then
        person.setBasePrice(days * dailyPrice);
        person.setPrice(days * dailyPrice);
        update (m);

end

lock-on-active
rule "Region adjustment"

    when
        m: RulesModel(  )
        person: InsuredPerson ( basePrice: basePrice, price: price) from m.insuredPeople
        prices: CoefficientsAndPrices ( regionCoefficient: regionCoefficient)
    then
        person.setPrice(regionCoefficient * basePrice + (price-basePrice));
        update (m);

end

lock-on-active
rule "Sport risk"

    when
        m: RulesModel ()
        person: InsuredPerson ( basePrice: basePrice, price: price) from m.insuredPeople
        prices: CoefficientsAndPrices ( sportCoefficient: sportCoefficient)
    then
        person.setPrice(sportCoefficient * basePrice + (price-basePrice));
        update (m);

end

lock-on-active
rule "Insured amount adjustment"

    when
        m: RulesModel()
        person: InsuredPerson ( price: price) from m.insuredPeople
        prices: CoefficientsAndPrices ( insuredAmountAddition: insuredAmountPrice)
    then
       person.setPrice(price + insuredAmountAddition);
       update (m);

end

lock-on-active
rule "Elderly risk"

    when
        m: RulesModel()
        person: InsuredPerson ( basePrice: basePrice, price: price, ageGroup: ageGroup == 2) from m.insuredPeople
        prices: CoefficientsAndPrices ( elderlyCoefficient: oldsCoefficient)
    then
        person.setPrice(elderlyCoefficient * basePrice + (price-basePrice));
        update (m);

end

lock-on-active
rule "Young discount"

    when
        m: RulesModel()
        person: InsuredPerson ( basePrice: basePrice, price: price, ageGroup: ageGroup == 0) from m.insuredPeople
        prices: CoefficientsAndPrices ( youngsCoefficient: youngsCoefficient)
    then
       person.setPrice(youngsCoefficient * basePrice + (price-basePrice));
       update (m);

end

lock-on-active
rule "Adults price"

    when
        m: RulesModel()
        person: InsuredPerson ( basePrice: basePrice, price: price, ageGroup: ageGroup == 1) from m.insuredPeople
        prices: CoefficientsAndPrices ( adultsCoefficient: adultsCoefficient)
    then
       person.setPrice(adultsCoefficient * basePrice + (price-basePrice));
       update (m);

end


rule "Group discount"

    when
        m: RulesModel (numberOfPeople: numberOfPeople > 3, totalPrice: totalPrice)
    then
        m.setDiscount(0.2 * totalPrice);

end

/*
TODO: discount ako uzme za auto ili stan
TODO: pravila auto i stan
*/


